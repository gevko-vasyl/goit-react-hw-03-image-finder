{"version":3,"sources":["components/Searchbar/Searchbar.jsx","components/ImageGallery/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.jsx","components/Modal/Modal.jsx","components/Spinner/Spinner.jsx","services/fetchImages.js","App.js","index.js"],"names":["Searchbar","onSubmit","useState","searchQuery","setSearchQuery","className","e","preventDefault","type","autoComplete","value","autoFocus","placeholder","onChange","target","ImageGalleryItem","image","onImgClick","largeImageURL","tags","src","alt","onClick","ImageGallery","images","map","id","webformatURL","Button","modalRoot","document","getElementById","Modal","largeImg","toggleModal","useEffect","handleEscClick","code","window","addEventListener","removeEventListener","createPortal","currentTarget","Spinner","color","height","width","axios","defaults","baseURL","fetchImages","query","page","a","get","response","data","hits","App","setImages","setQuery","setPage","isLoading","setIsLoading","isModalOpen","setIsModalOpen","setLargeImg","handleFetchImages","prevImages","scrollTo","top","documentElement","scrollHeight","behavior","prevState","q","larImg","length","prevPage","ReactDOM","render","StrictMode"],"mappings":"oXAIe,SAASA,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAUA,OACE,wBAAQC,UAAU,YAAlB,SACE,uBAAMA,UAAU,aAAaJ,SAPR,SAACK,GACxBA,EAAEC,iBACFN,EAASE,GACTC,EAAe,KAIb,UACE,wBAAQI,KAAK,SAASH,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,sBAGF,uBACEA,UAAU,mBACVG,KAAK,OACLC,aAAa,MACbC,MAAOP,EACPQ,WAAS,EACTC,YAAY,2BACZC,SAvBkB,SAACP,GACzBF,EAAeE,EAAEQ,OAAOJ,eCJb,SAASK,EAAT,GAKX,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,cACAC,EACC,EADDA,KAEA,OACE,oBAAId,UAAU,mBAAd,SACE,qBACEe,IAAKJ,EACLK,IAAKF,EACLd,UAAU,yBACViB,QAAS,kBAAML,EAAWC,Q,MCVnB,SAASK,EAAT,GAA+C,IAAvBC,EAAsB,EAAtBA,OAAQP,EAAc,EAAdA,WAC7C,OACE,oBAAIZ,UAAU,eAAd,SACGmB,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcT,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAApC,OACV,cAACJ,EAAD,CAEEC,MAAOW,EACPR,KAAMA,EACNF,WAAYA,EACZC,cAAeA,GAJVQ,Q,UCOAE,EAdA,SAAC,GAAiB,IAAfN,EAAc,EAAdA,QAChB,OACE,qBAAKjB,UAAU,oBAAf,SACE,wBAAQA,UAAU,SAASG,KAAK,SAASc,QAASA,EAAlD,0BCDAO,G,MAAYC,SAASC,eAAe,cAE3B,SAASC,EAAT,GAA2C,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YACxCC,qBAAU,WACR,IAAMC,EAAiB,SAAC9B,GAAD,MAAkB,WAAXA,EAAE+B,MAAqBH,KAErD,OADAI,OAAOC,iBAAiB,UAAWH,GAC5B,kBAAME,OAAOE,oBAAoB,UAAWJ,MAClD,CAACF,IAIJ,OAAOO,uBACL,qBAAKpC,UAAU,UAAUiB,QAHA,SAAChB,GAAD,OACzBA,EAAEQ,SAAWR,EAAEoC,eAAiBR,KAEhC,SACE,qBAAK7B,UAAU,QAAf,SACE,qBAAKe,IAAKa,EAAUZ,IAAI,SAG5BQ,G,qBCNWc,G,YAZC,WACd,OACE,cAAC,IAAD,CACEtC,UAAU,UACVG,KAAK,YACLoC,MAAM,UACNC,OAAQ,GACRC,MAAO,O,iBCPbC,IAAMC,SAASC,QAAU,sBAEzB,IAAMC,EAAW,uCAAG,WAAOC,EAAOC,GAAd,eAAAC,EAAA,sEACKN,IAAMO,IAAN,kBACVH,EADU,iBACIC,EADJ,oEALV,uCAIK,cACZG,EADY,yBAIXA,EAASC,KAAKC,MAJH,2CAAH,wDAOFP,ICsDAQ,MA1Df,WACE,MAA4BxD,mBAAS,IAArC,mBAAOsB,EAAP,KAAemC,EAAf,KACA,EAA0BzD,mBAAS,IAAnC,mBAAOiD,EAAP,KAAcS,EAAd,KACA,EAAwB1D,mBAAS,GAAjC,mBAAOkD,EAAP,KAAaS,EAAb,KACA,EAAkC3D,oBAAS,GAA3C,mBAAO4D,EAAP,KAAkBC,EAAlB,KACA,EAAsC7D,oBAAS,GAA/C,mBAAO8D,EAAP,KAAoBC,EAApB,KACA,EAAgC/D,mBAAS,IAAzC,mBAAO+B,EAAP,KAAiBiC,EAAjB,KAEA/B,qBAAU,WACR,GAAc,KAAVgB,EAAJ,CAGA,IAAMgB,EAAiB,uCAAG,4BAAAd,EAAA,6DACxBU,GAAa,GADW,SAELb,EAAYC,EAAOC,GAFd,OAElBI,EAFkB,OAGxBG,GAAU,SAACS,GAAD,4BAAoBA,GAApB,YAAmCZ,OAChC,IAATJ,GACFd,OAAO+B,SAAS,CACdC,IAAKxC,SAASyC,gBAAgBC,aAC9BC,SAAU,WAGdV,GAAa,GAVW,2CAAH,qDAYvBI,OACC,CAACf,EAAMD,IAEV,IAeMjB,EAAc,WAClB+B,GAAe,SAACS,GAAD,OAAgBA,MAGjC,OACE,sBAAKrE,UAAU,MAAf,UACE,cAAC,EAAD,CAAWJ,SArBW,SAAC0E,GACzBhB,EAAU,IACVC,EAASe,GACTd,EAAQ,MAoBN,cAAC,EAAD,CAAc5C,WAbO,SAAC2D,GACxBV,EAAYU,GACZ1C,KAW8CV,OAAQA,IACnDsC,GAAa,cAAC,EAAD,IACK,IAAlBtC,EAAOqD,QAAgB,cAAC,EAAD,CAAQvD,QAnBV,WACxBuC,GAAQ,SAACiB,GAAD,OAAcA,EAAW,QAmB9Bd,GAAe,cAAC,EAAD,CAAO/B,SAAUA,EAAUC,YAAaA,Q,YCxD9D6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnD,SAASC,eAAe,W","file":"static/js/main.91701070.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Searchbar.scss\";\n\nexport default function Searchbar({ onSubmit }) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const handleInputChange = (e) => {\n    setSearchQuery(e.target.value);\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(searchQuery);\n    setSearchQuery(\"\");\n  };\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={handleFormSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n\n        <input\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          value={searchQuery}\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={handleInputChange}\n        />\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function ImageGalleryItem({\n  image,\n  onImgClick,\n  largeImageURL,\n  tags,\n}) {\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={image}\n        alt={tags}\n        className=\"ImageGalleryItem-image\"\n        onClick={() => onImgClick(largeImageURL)}\n      />\n    </li>\n  );\n}\n\nImageGalleryItem.propTypes = {\n  image: PropTypes.string.isRequired,\n  onImageClick: PropTypes.func.isRequired,\n  largeImageURL: PropTypes.string.isRequired,\n  tags: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ImageGalleryItem from \"./ImageGalleryItem\";\nimport \"./ImageGallery.scss\";\n\nexport default function ImageGallery({ images, onImgClick }) {\n  return (\n    <ul className=\"ImageGallery\">\n      {images.map(({ id, webformatURL, largeImageURL, tags }) => (\n        <ImageGalleryItem\n          key={id}\n          image={webformatURL}\n          tags={tags}\n          onImgClick={onImgClick}\n          largeImageURL={largeImageURL}\n        />\n      ))}\n    </ul>\n  );\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      webformatURL: PropTypes.string.isRequired,\n      largeImageURL: PropTypes.string.isRequired,\n      tags: PropTypes.string.isRequired,\n    })\n  ),\n  onImageClick: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport \"./Button.scss\";\n\nconst Button = ({ onClick }) => {\n  return (\n    <div className=\"Button__container\">\n      <button className=\"Button\" type=\"button\" onClick={onClick}>\n        Load more\n      </button>\n    </div>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport \"./Modal.scss\";\n\nconst modalRoot = document.getElementById(\"modalRoot\");\n\nexport default function Modal({ largeImg, toggleModal }) {\n  useEffect(() => {\n    const handleEscClick = (e) => e.code === \"Escape\" && toggleModal();\n    window.addEventListener(\"keydown\", handleEscClick);\n    return () => window.removeEventListener(\"keydown\", handleEscClick);\n  }, [toggleModal]);\n\n  const handleOverlayClick = (e) =>\n    e.target === e.currentTarget && toggleModal();\n  return createPortal(\n    <div className=\"Overlay\" onClick={handleOverlayClick}>\n      <div className=\"Modal\">\n        <img src={largeImg} alt=\"\" />\n      </div>\n    </div>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  toggleModal: PropTypes.func.isRequired,\n  largeImg: PropTypes.string.isRequired,\n};\n","import Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport \"./Spinner.scss\";\n\nconst Spinner = () => {\n  return (\n    <Loader\n      className=\"Spinner\"\n      type=\"ThreeDots\"\n      color=\"#3f51b5\"\n      height={80}\n      width={80}\n    />\n  );\n};\n\nexport default Spinner;\n","import axios from \"axios\";\n\nconst apiKey = \"20312002-359243adeeeebb2bc74e90a1f\";\n\naxios.defaults.baseURL = \"https://pixabay.com\";\n\nconst fetchImages = async (query, page) => {\n  const response = await axios.get(\n    `/api/?q=${query}&page=${page}&image_type=photo&orientation=horizontal&per_page=12&key=${apiKey}`\n  );\n  return response.data.hits;\n};\n\nexport default fetchImages;\n","import { useState, useEffect } from \"react\";\nimport Searchbar from \"./components/Searchbar/Searchbar\";\nimport ImageGallery from \"./components/ImageGallery/ImageGallery\";\nimport Button from \"./components/Button/Button\";\nimport Modal from \"./components/Modal/Modal\";\nimport Spinner from \"./components/Spinner/Spinner\";\n\nimport fetchImages from \"services/fetchImages\";\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [largeImg, setLargeImg] = useState(\"\");\n\n  useEffect(() => {\n    if (query === \"\") {\n      return;\n    }\n    const handleFetchImages = async () => {\n      setIsLoading(true);\n      const data = await fetchImages(query, page);\n      setImages((prevImages) => [...prevImages, ...data]);\n      if (page !== 1) {\n        window.scrollTo({\n          top: document.documentElement.scrollHeight,\n          behavior: \"smooth\",\n        });\n      }\n      setIsLoading(false);\n    };\n    handleFetchImages();\n  }, [page, query]);\n\n  const handleQueryChange = (q) => {\n    setImages([]);\n    setQuery(q);\n    setPage(1);\n  };\n\n  const handleButtonClick = () => {\n    setPage((prevPage) => prevPage + 1);\n  };\n\n  const handleImageClick = (larImg) => {\n    setLargeImg(larImg);\n    toggleModal();\n  };\n\n  const toggleModal = () => {\n    setIsModalOpen((prevState) => !prevState);\n  };\n\n  return (\n    <div className=\"App\">\n      <Searchbar onSubmit={handleQueryChange} />\n\n      <ImageGallery onImgClick={handleImageClick} images={images} />\n      {isLoading && <Spinner />}\n      {images.length !== 0 && <Button onClick={handleButtonClick} />}\n      {isModalOpen && <Modal largeImg={largeImg} toggleModal={toggleModal} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./styles/base.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}